import org.gradle.plugins.ide.eclipse.model.Classpath

/*
 * Copyright 2014 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'git-dependencies'

defaultTasks 'clean', 'build', 'install'

ext {
    group = aeronGroup
    version = aeronVersion

    if (!project.hasProperty('ossrhUsername'))
        ossrhUsername = ''

    if (!project.hasProperty('ossrhPassword'))
        ossrhPassword = ''
}

allprojects {
    apply plugin: 'eclipse'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
        classpath 'com.puppycrawl.tools:checkstyle:5.9'
        classpath 'org.batcha.gradle.plugins:git-dependencies:0.2'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    // Make sure that we use the correct JDK in Eclipse
    // There needs to be a JDK8 JVM installed in Eclipse before
    // importing the generated projects.
    plugins.withType(JavaBasePlugin) {
        eclipse.classpath.file.whenMerged { Classpath path ->
            path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
                it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
            }
        }
    }

    group = aeronGroup
    version = aeronVersion

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile 'org.hamcrest:hamcrest-all:1.3', 'junit:junit:4.11', 'org.mockito:mockito-all:1.9.5'
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = 5.9
    }

    test {
        testLogging {
            //events 'passed', 'skipped', 'failed'
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    javadoc {
        title = '<h1>Aeron Transport Protocol</h1>'

        options.bottom = '<i>Copyright &#169; 2014 Real Logic Ltd. All Rights Reserved.</i>'
        options.addStringOption('XDignore.symbol.file', '-quiet')
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    configurations {
        tests
    }

    artifacts {
        archives sourcesJar, javadocJar
        tests testJar
    }
}

project(':aeron-common') {
    dependencies {
        compile 'uk.co.real-logic:Agrona:1.0-SNAPSHOT'.ext.git = 'https://github.com/real-logic/Agrona.git'
    }
}

project(':aeron-driver') {
    apply plugin: 'application'

    mainClassName = 'uk.co.real_logic.aeron.driver.MediaDriver'

    dependencies {
        compile project(':aeron-common')
        testCompile project(path: ':aeron-common', configuration: 'tests')
    }

    test {
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }

    run {
        systemProperties(System.properties)
    }

    build.doLast {
        tasks.distZip.execute()
    }
}

project(':aeron-client') {
    dependencies {
        compile project(':aeron-common')
        testCompile project(path: ':aeron-common', configuration: 'tests')
    }
}

project(':aeron-samples') {
    apply plugin: 'shadow'

    dependencies {
        compile project(':aeron-client'), project(':aeron-driver'), 'org.hdrhistogram:HdrHistogram:1.2.1'
    }

    shadow {
        outputFile = new File('aeron-samples/build/libs/samples.jar')
    }

    build.doLast {
        tasks.shadowJar.execute()
    }
}

project(':aeron-system-tests') {
    dependencies {
        compile project(':aeron-client'), project(':aeron-driver')
        testCompile project(path: ':aeron-common', configuration: 'tests')
    }

    test {
        systemProperties('java.net.preferIPv4Stack': true)
        systemProperties('aeron.event.log': System.properties['aeron.event.log'])
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = 'Aeron'
                packaging = 'pom'
                // optionally artifactId can be defined here
                description = 'Efficient reliable unicast and multicast transport protocol.'
                url = 'https://github.com/real-logic/Aeron'

                scm {
                    connection = 'scm:git:https://github.com/real-logic/Aeron.git'
                    developerConnection = 'scm:git:https://github.com/real-logic/Aeron.git'
                    url = 'https://github.com/real-logic/Aeron.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'tmontgomery'
                        name = 'Todd L. Montgomery'
                        email = 'tmont@nard.net'
                        url = 'https://github.com/tmontgomery'
                    }
                    developer {
                        id = 'mjpt777'
                        name = 'Martin Thompson'
                        email = 'mjpt777@gmail.com'
                        url = 'https://github.com/mjpt777'
                    }
                    developer {
                        id = 'RichardWarburton'
                        name = 'Richard Warburton'
                        email = 'richard.warburton@gmail.com'
                        url = 'https://github.com/RichardWarburton'
                    }
                    developer {
                        id = 'SimulatedSimian'
                        name = 'Lee Witek'
                        email = 'leewitek@gmail.com'
                        url = 'https://github.com/SimulatedSimian'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
